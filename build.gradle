/**
 * To make release and increase version, set stage final:
 *
 * gradle release -Prelease.scope=patch -Prelease.stage=final
 * gradle release -Prelease.scope=minor -Prelease.stage=final
 * gradle release -Prelease.scope=major -Prelease.stage=final
 *
 * The change scope can be either MAJOR, MINOR, or PATCH
 * The stage of the change corresponds to the development stage (such as dev, milestone, rc, final)
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // need to have private key id_rsa and known_hosts in ~/.ssh, on windows too
        classpath 'org.ajoberstar:gradle-git:1.4.2'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'org.ajoberstar.release-opinion'

import org.apache.tools.ant.filters.ReplaceTokens
import org.ajoberstar.grgit.Grgit


sourceCompatibility = 1.6    // see also jdk in gradle.properties, and j2se in jnlp-template.xml
targetCompatibility = 1.6
mainClassName = 'org.sergeys.webcachedigger.ui.WebCacheDigger'

ext.buildWebstartDir = 'build/webstart'
ext.webstartUrl = 'http://svs.bugz.org.ua/wcd2'
ext.repo = Grgit.open(project.file('.'))

repositories {
    mavenCentral()
}

dependencies {
    compile('eu.medsea.mimeutil:mime-util:2.1.3'){
        exclude module: 'log4j'
        exclude module: 'slf4j-log4j12'
    }

    compile 'com.h2database:h2:1.4.191'
    compile 'com.mpatric:mp3agic:0.8.4'

    compile 'org.flywaydb:flyway-core:4.0'

    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
}


def val = System.getenv('USER');    // linux
if(val == null){
    val = System.getenv('USERNAME');    // linux under glassfish, windows
}
def builduser = (val == null ? 'undefined' : val)
def buildhost = InetAddress.localHost.hostName


release {
    grgit = repo
}

//tasks.release.dependsOn 'build'

println 'version: ' + version.toString()

processResources {
    from(sourceSets.main.resources){
        include '**/settings.properties'
        filter(ReplaceTokens,
        tokens:[

            'version.timestamp': String.format('%1$tY-%1$tm-%1$td-%1$tH-%1$tM', repo.head().date),
            'version.display': String.format('%2$s - %1$te %1$tb %1$tY', repo.head().date, project.version.toString()),

            'git.commit': repo.head().abbreviatedId,
            'git.date': repo.head().date.toString(),
            'build.date': new java.util.Date().toString(),
            'version': project.version.toString(),
            'build.host': builduser + '@' + buildhost
            ])
    }
}


// https://github.com/gmateo/gradle-webstart-example/blob/master/build.gradle

jar {
    manifest {
        attributes 'Implementation-Title': 'Web Cache Digger',
            'Implementation-Version': version,
            'Permissions': 'all-permissions',
            'Application-Name': 'Web Cache Digger'
    }
}

task copyJars(type: Copy, dependsOn: [jar]) {
    from configurations.runtime
    from("build/libs")
    into("$buildWebstartDir/lib")
    include('*.jar')
}

task copyFiles(type: Copy) {
    from("src/main/webstart")
    into("$buildWebstartDir/signed")
    include('*.png')
}

task createKey{

        File ksfile = new File('src/main/webstart/.keystore')
        if(!ksfile.isFile()){
            ant.genkey(
                keystore: 'src/main/webstart/.keystore',
                storepass: 'password',
                alias: 'sergey.selivanov',
                validity: 365
                ){
                dname{
                    param(name: 'CN', value: 'Sergey Selivanov')
                    param(name: 'OU', value: 'Org Unit')
                    param(name: 'O', value: 'Org')
                    param(name: 'C', value: 'UA')
                    param(name: 'L', value: 'Location')
                }
            }
        }
    }


task signAll(dependsOn: [copyJars, createKey]) << {
    new File("$buildWebstartDir/signed").mkdirs()
    def libFiles = files { file("$buildWebstartDir/lib").listFiles() }
    libFiles.each {
        ant.signjar(
                destDir: "${buildWebstartDir}/signed",
                alias: 'sergey.selivanov',
                jar: it,
                keystore: 'src/main/webstart/.keystore',
                storepass: 'password',
                preservelastmodified: 'true')
    }
}

task generateJnlp(dependsOn: [signAll, copyFiles]) << {

    File jnlpTemplateFile = new File('src/main/webstart/jnlp-template.xml')
    def root = new XmlParser().parse(jnlpTemplateFile)
    def jnlpFileName = "wcd2.jnlp"

    root.@codebase = webstartUrl
    root.@href = jnlpFileName


    def information = root.information[0]

    //def icon = information.icon[0]
    //icon.@href = webstartUrl + '/largeicon.png'

    information.icon.each {
        it.@href = webstartUrl + '/' + it.@href
    }


    def resource = root.resources[0]

//    def j2se = resource.j2se[0]
//    j2se.@version = "$sourceCompatibility+"

    def collection = files { file("${buildWebstartDir}/lib").listFiles() }
    //def mainJar = "wcd2-${version}.jar"
    def mainJar = archivesBaseName + '-' + version.toString() + '.jar'

    collection.each {
        def resourceValues = [href: it.name]
//println it.name + ' - ' + mainJar
        if (mainJar == it.name) {
            resourceValues = [href: it.name, main: 'true']
        }
        resource.appendNode('jar', resourceValues)
    }

    // Setting the main class
    def applicationDesc = root.'application-desc'[0]
    applicationDesc.'@main-class' = mainClassName

    // Writing the jnlp file filled
    File jnlpFile = new File("${buildWebstartDir}/signed/" + jnlpFileName)

    def prn = new XmlNodePrinter(new PrintWriter(jnlpFile))
    prn.setPreserveWhitespace(true)
    prn.print(root)
}

task webstart (dependsOn: [generateJnlp])<< {
    println("Generating all webstart files in ${buildWebstartDir}/signed")
}

checkstyle {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
}
